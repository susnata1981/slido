import React from "react";
import { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import PropTypes from "prop-types";
import { useForm } from "react-hook-form";
import { useHistory } from "react-router-dom";

import Header from "../Header";

import CreateEvent from "./CreateEvent";

import {
  Grid,
  Tabs,
  Tab,
  Box,
  Typography,
  TableContainer,
  Table,
  Paper,
  TableHead,
  TableCell,
  TableRow,
  TableBody,
  Input,
  Button
} from "@material-ui/core";

export default function Home() {
  const { register, errors, handleSubmit } = useForm();

  const [eventName, setEventName] = useState("");
  const [passcode, setPasscode] = useState("");
  const [startDate, setStartDate] = useState("");
  const [events, setEvents] = useState([]);
  const [user, setUser] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [tabIndex, setTabIndex] = useState(2);
  const [currentEvents, setCurrentEvents] = useState([]);

  useEffect(() => {
    fetch("/logged_in")
      .then(response => {
        if (response.status == 401) {
          window.location.href = "/admin";
        } else {
          return response.json();
        }
      })
      .then(response => {
        setUser(response.user);
      });
  }, []);

  const loadEvents = () => {
    fetch("/v1/events")
      .then(response => response.json())
      .then(data => {
        setEvents(data);
        setCurrentEvents(data);
        setIsLoading(false);
      });
  };

  useEffect(() => {
    loadEvents();
  }, []);

  const handleTabChange = (e, newValue) => {
    let today = new Date();
    setTabIndex(newValue);
    updateCurrentEvents(newValue);
  };

  const updateCurrentEvents = index => {
    const today = new Date();

    if (index == 0) {
      setCurrentEvents(
        events.filter(e => {
          if (e.start == undefined) {
            return false;
          }
          return Date.parse(e.start) >= today;
        })
      );
    } else if (index == 1) {
      setCurrentEvents(
        events.filter(e => {
          if (e.start == undefined) {
            return false;
          }
          return Date.parse(e.start) < today;
        })
      );
    } else {
      setCurrentEvents(events);
    }
  };

  const updateEvent = event => {
    const formData = new FormData();
    formData.append("event[name]", event.name);
    formData.append("event[description]", event.description);
    formData.append("event[passcode]", event.passcode);
    formData.append("event[start]", event.start);

    fetch(`/v1/events/${event.id}`, {
      method: "PATCH",
      body: formData
    })
      .then(response => response.json())
      .then(data => {
        loadEvents();
      });
  };

  const deleteEvent = event => {
    fetch(`/v1/events/${event.id}`, {
      method: "DELETE"
    })
      .then(response => response.json())
      .then(data => {
        loadEvents();
      });
  };

  const handleCreateEvent = d => {
    const data = JSON.stringify({
      event: {
        name: d.eventName,
        passcode: d.passcode,
        start: d.startDate
      }
    });

    const formData = new FormData();
    formData.append("event[name]", d.eventName);
    formData.append("event[passcode]", d.passcode);
    formData.append("event[start]", d.startDate);
    fetch("/v1/events", {
      method: "POST",
      body: formData
    })
      .then(response => response.json())
      .then(data => console.log(data));
  };

  if (isLoading) {
    return (
      <Grid container style={{ height: "100vh" }}>
        <Grid item>
          <React.Fragment>
            <h2>Loading events...</h2>
          </React.Fragment>
        </Grid>
      </Grid>
    );
  } else {
    return (
      <React.Fragment>
        <Header />
        <Grid container spacing={2} alignItems="center" justify="center">
          <Grid item xs={8}>
            <Tabs
              value={tabIndex}
              indicatorColor="primary"
              textColor="primary"
              variant="fullWidth"
              onChange={handleTabChange}
            >
              <Tab label="Upcoming Events" />
              <Tab label="Past Events" />
              <Tab label="All Events" />
            </Tabs>
            <h2>All Events</h2>
            <EventList
              events={currentEvents}
              updateEvent={updateEvent}
              setCurrentEvents={setCurrentEvents}
              loadEvents={loadEvents}
              deleteEvent={deleteEvent}
            />
          </Grid>
        </Grid>
      </React.Fragment>
    );
  }
}

function EventList({
  events,
  setCurrentEvents,
  updateEvent,
  loadEvents,
  deleteEvent
}) {
  const { useState } = React;
  const createData = (name, calories, fat, carbs, protein) => {
    return { name, calories, fat, carbs, protein };
  };

  const handleEdit = row => {
    row.isEditMode = true;
    console.log(events);
    setCurrentEvents([...events]);
  };

  const handleSave = row => {
    row.isEditMode = false;
    updateEvent(row);
  };

  const handleCancel = row => {
    row.isEditMode = false;
    loadEvents();
  };

  const handleDelete = row => {
    deleteEvent(row);
  };

  const formatDate = date => {
    return new Date(date).toLocaleDateString();
  };

  const handleStartDateChange = (event, row) => {
    let nd = new Date(event.target.value);
    var now = new Date();
    now.setHours(0, 0, 0, 0);
    if (nd < now) {
      console.log("Selected date is in the past");
    }
    row.start = new Date(
      nd.getTime() + Math.abs(nd.getTimezoneOffset() * 60 * 1000)
    );
  };

  const handleNameChange = (event, row) => {
    row.name = event.target.value;
    console.log(event.target.value);
  };

  const handleDescriptionChange = (event, row) => {
    row.description = event.target.value;
    console.log(event.target.value);
  };

  return (
    <TableContainer component={Paper}>
      <Table aria-label="simple table">
        <TableHead>
          <TableRow>
            <TableCell>Name</TableCell>
            <TableCell>Description</TableCell>
            <TableCell>Passcode</TableCell>
            <TableCell>Start Date</TableCell>
            <TableCell>Created At</TableCell>
            <TableCell></TableCell>
            <TableCell></TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {events.map(row => (
            <TableRow key={row.name}>
              <CustomTableCell
                inputType="text"
                row={row}
                name="name"
                value={row.name}
                onChange={handleNameChange}
              />
              <CustomTableCell
                inputType="text"
                row={row}
                name="description"
                value={row.description}
                onChange={handleDescriptionChange}
              />
              <TableCell>{row.passcode}</TableCell>
              <CustomTableCell
                inputType="date"
                row={row}
                value={formatDate(row.start)}
                onChange={handleStartDateChange}
              />
              <TableCell>{formatDate(row.created_at)}</TableCell>
              <TableCell>
                {row.isEditMode ? (
                  <div>
                    <Button
                      color="primary"
                      onClick={() => {
                        handleSave(row);
                      }}
                    >
                      Save
                    </Button>
                    <Button
                      color="primary"
                      onClick={() => {
                        handleCancel(row);
                      }}
                    >
                      Cancel
                    </Button>
                  </div>
                ) : (
                  <Button color="primary" onClick={() => handleEdit(row)}>
                    Edit
                  </Button>
                )}
              </TableCell>
              <TableCell>
                <Button color="primary" onClick={() => handleDelete(row)}>
                  Delete
                </Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
}

const CustomTableCell = ({ row, inputType, name, value, onChange }) => {
  const { isEditMode } = row;

  return (
    <TableCell align="left">
      {isEditMode ? (
        <Input
          type={inputType}
          defaultValue={row[name]}
          name={name}
          onChange={e => onChange(e, row)}
        />
      ) : (
        value
      )}
    </TableCell>
  );
};
